"""
ID: seishin1
LANG: PYTHON3
TASK: barn1
"""
fin = open('barn1.in', 'r')
fout = open('barn1.out', 'w')

m, s, c = map(int, fin.readline().split())

# Assume these come in sorted order. If not, oh well, we can sort it. Check if this ruins time complexity.
# ASSUMPTION FAILED! THEY COULD BE OUT OF ORDER
occupied = sorted([int(x) for x in fin])  # O(c log c), 1 <= c <= s
gaps = []
for i in range(1, len(occupied)):  # Loop: O(c - 1). Work: O(1)
  gaps.append(occupied[i] - occupied[i - 1] - 1)
#print(' ', gaps)

# Micro-optimize: do a set of max() and pop() calls instead of sorting ... but worst case can be worse than sorting
gaps = sorted(gaps, reverse=True)  # Len: c - 1. O( (c-1) log(c-1) )

print(m, s, c)
print(occupied)
print(gaps)

unblocked = (occupied[0] - 1) + (s - occupied[-1])  # Free gaps at start and end
print(unblocked)
for i in range(min(len(gaps), m - 1)):  # Len(gaps): c - 1, 1 <= c <= s. 1 <= m <= 50. O(50).
  # Gaps generated by boards
  unblocked += gaps[i]  # gaps was sorted descendingly
  print('  ', unblocked, ' (+', gaps[i], ')')


# Time complexity: O(c log c) + O(c - 1) + O( (c-1) log(c-1) ) + O(50)
# O(c log c)
# 1 <= c <= s; 1 <= s <= 200.
print(s - unblocked)
fout.write(str(s - unblocked) + '\n')

fin.close()
fout.close()

# if(__name__ == '__main__'): # Local debug
#  import sys
#  import os
#  print('type {}.out'.format(sys.argv[0].lstrip('.\').split('.')[0])) #Debug
#  os.system('type {}.out'.format(sys.argv[0].lstrip('.\').split('.')[0]))

